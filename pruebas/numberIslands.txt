var
int grid[4][5],
islands, i, j 

int dfs(int r, int c)
{
    grid[r][c] = 0;
    if (r - 1 >= 0) {
        if (grid[r - 1][c] == 1) {
            dfs(r - 1, c)
        }
    }

    if (r + 1 < 4) {
        if (grid[r + 1][c] == 1) {
            dfs(r + 1, c)
        }
    }

    if (c - 1 >= 0) {
        if (grid[r][c - 1] == 1) {
            dfs(r, c - 1)
        }
    }

    if (c + 1 < 5) {
        if (grid[r][c + 1] == 1) {
            dfs(r, c + 1)
        }
    }
}

int initGrid() {
    grid[0][0] = 1;
    grid[0][1] = 1;
    grid[0][2] = 0;
    grid[0][3] = 0;
    grid[0][4] = 0;

    grid[1][0] = 1;
    grid[1][1] = 1;
    grid[1][2] = 0;
    grid[1][3] = 0;
    grid[1][4] = 0;

    grid[2][0] = 0;
    grid[2][1] = 0;
    grid[2][2] = 1;
    grid[2][3] = 0;
    grid[2][4] = 0;

    grid[3][0] = 0;
    grid[3][1] = 0;
    grid[3][2] = 0;
    grid[3][3] = 1;
    grid[3][4] = 1;
}

int numIslands() {
    initGrid()

    islands = 0;
    i = 0; j = 0;

    while (i < 4) {
        j = 0;
        while (j < 5) {
            if (grid[i][j] == 1) {
                dfs(i, j)
                islands = islands + 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }
}

main {
    numIslands()
    print("The number of islands is", islands, endl);
}